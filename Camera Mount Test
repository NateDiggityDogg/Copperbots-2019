/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team2586.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;
import edu.wpi.cscore.UsbCamera;

public class Robot extends TimedRobot {

	XboxController operatorController;

	// Camera Servos
	Servo cameraServoUD, cameraServoLR;

	@Override
	public void robotInit() {
		// Camera
		UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
		camera.setResolution(64, 64);
		VisionThread vThread = new VisionThread(camera, null, null);

		// Controllers
		operatorController = new XboxController(5);

		// Servos
		cameraServoUD = new Servo(1);
		cameraServoLR = new Servo(2);
		cameraServoUD.set(0.5);
		cameraServoLR.set(0.5);

	}

	@Override
	public void autonomousInit() {
	}

	@Override
	public void autonomousPeriodic() {

	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic() {

		// Turn Camera Left
		if (operatorController.getPOV() == 270 && cameraServoStopLR()) {
			cameraServoLR.setSpeed(0.1);
			// Turn Camera Right
		} else if (operatorController.getPOV() == 90 && cameraServoStopLR()) {
			cameraServoLR.setSpeed(-0.1);
		}

		// Turn Camera Up
		if (operatorController.getPOV() == 0 && cameraServoStopUD()) {
			cameraServoUD.setSpeed(0.1);
			// Turn Camera Down
		} else if (operatorController.getPOV() == 180 && cameraServoStopUD()) {
			cameraServoUD.setSpeed(-0.1);
		}
	}

	// Camera Servo Control Left-Right
	public boolean cameraServoStopLR() {
		double servoPosLR = cameraServoLR.get();
		if (servoPosLR >= 0.8 || servoPosLR <= 0.2) {
			return false;
		} else {
			return true;
		}
	}

	// Camera Servo Control Up-Down
	public boolean cameraServoStopUD() {
		double servoPosUD = cameraServoUD.get();
		if (servoPosUD >= 0.8 || servoPosUD <= 0.2) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}
}
